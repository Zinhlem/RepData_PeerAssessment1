available.packages()
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
install.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
rnorm(10)
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
lapply(x,mean)
x <- list(a = 1;4, b= =rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x,mean)
x <- list(a = 1:4, b= =rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
x <- list(a = 1:4, b= rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x,mean)
lapply(x, runif)
x<- (x=1:4)
lapply(x, runif)
lapply(x, runif, min = 0, max, = 10)
lapply(x, runif, min = 0, max = 10)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2)
)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b= rnorm(10), c = rnorm(20,1), d = rnorm(100,5))
lapply(x,mean)
sapply(x, mean)
##apply
#first argument array
x <- matrix(rnorm(200), 20, 20)
apply(x, 2, mean)
##apply
#first argument array
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x
mapply(rep, 1:4, 4:1)
noise <- function(n, mean, ad){
rnorm(n, mean, ad)
}
noise(5, 1, 2)
noise(1:5, 1:5, 2)
mapply(noise, 1:5, 1:5, 2)
## tapply
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)
tapply(x, f, mean, simplify = FALSE)
tapply(x,f, range)
## split
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
split(x,f)
lapply(split(x,f), mean)
install.packages("datasets.load")
library(datasets)
head(airquality)
a <- split(airquality, airquality$Month)
lapply(a, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(a, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(a, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T))
log(-4)
log(4)
log(0)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
head(iris)
x <- subset(iris, iris$Sepal.Length, iris$Species == "virginica")
tapply(iris$Sepal.Length, iris$Species == "virginica", mean )
ncol(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
##3.
library(datasets)
data(mtcars)
head(mtcars)
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
debug(ls)
debug(ls)
ls
sapply(split(mtcars$hp, mtcars$cyl), mean)
##1.
tapply(iris$Sepal.Length, iris$Species, mean )
abs(tapply(mtcars$hp,mtcars$cyl==4,mean)[2] - tapply(mtcars$hp,mtcars$cyl==8,mean)[2])
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
q
exit
quit
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
Q
Q
1+1
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(23)
makeVector(x=23)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function()x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
##Return a list with the functions defined
list(set =  set,
get = get,
setinverse = setinverse,
getinverse = getinverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
cacheSolve(my_matrix)
install.packages("xlsx")
TRUE == TRUE
TRUE == F
3 ==2
3 != 2
"hello"" > "goodbye""
"hello" > "goodbye""
"hello" > "goodbye"
"hello" > "goodbye"
T < F
x <- 5
y <- 7
!(!(x < 4) & !!!(y > 12))
install.packages("lattice")
install.packages("datasets.load")
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, col = drv)
qplot(displ, hwy, data=mpg, geom = C"point", "smooth")
qplot(displ, hwy, data=mpg, geom = c"point", "smooth")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy,, data = mpg, fill = drv)
install.packages("nlme")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
dataFrame <- data.frame(x = x y = y)
plot(x, y, col = "blue", pch = 19, cex = 2)
set.seed(1234)
par(mar = c(0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12,  mean = rep(c(1,2,1), each = 4), sd = 0.2)
dataFrame <- data.frame(x = x y = y)
plot(x, y, col = "blue", pch = 19, cex = 2)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12,  mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x y = y)
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
set.seed(1234)
par(mar = c(0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12,  mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
myplclust(hClustering, lab = rep(1:3, each = 4),
lab.col = rep(1:3, each = 4))
set.seed(143)
datamatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap((datamatrix))
set.seed(1234)
par(mar = c(0,0,0,0))
plot(x,y, col = "blue", pch = 19, cex =2)
text(x + 0.05, y + 0.05, labels = as.character((1:12)))
set.seed(143)
datamatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap((datamatrix))
svd1 <- svd(scale(datamatrixOrdered))
par(mfrow = c(1,3))
image(t(datamatrixOrdered) [, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab ="First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1 <- svd(scale(datamatrixOrdered))
datamatrixOrdered <- as.matrix(dataFrame)[sample(1:12), ]
svd1 <- svd(scale(datamatrixOrdered))
par(mfrow = c(1,3))
image(t(datamatrixOrdered) [, nrow(dataMatrixOrdered):1])
image(t(datamatrixOrdered) [, nrow(dataMmtrixOrdered):1])
image(t(datamatrixOrdered) [, nrow(datamatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab ="First left singular vector",
pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
knitr::opts_chunk$set(echo = TRUE)
```{r cars}
setwd("H:/Documents/RepData_PeerAssessment1")
```{r cars}
data <- read.csv("activity.csv")
median(8,8,9)
five_inter_step <- data$interval == 5
five_inter_step
missing_entries$steps [is.na(missing_entries$steps)] <- mean(data$steps, na.rm = T)
missing_entries <- sum(is.na(data$steps))
missing_entries
View(data)
